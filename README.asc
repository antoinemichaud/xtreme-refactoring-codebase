Le refactoring, c'est bien. Le refactoring, c'est beau. Mais le
refactoring, est-ce vraiment pragmatique ?

Et si on arrêtait les débats stériles ? Avec Xtreme Refactoring, la
seule loi : c'est le code. Dans cet environnement hostile, toutes les
techniques sont permises.

Rejoignez le temps de ce hands-on le projet "Tennis Underground" en
pleine expansion où vous pourrez démontrer vos talents de codeur face
aux autres en livrant le plus rapidement possible toutes les nouvelles
fonctionnalités qui ne cessent de germer dans les têtes de nos Products
Owners.

TDDeur, DDDeur, Crapman : imposez votre style !

[[pré-requis-technique]]
Pré-requis technique
--------------------

Ce slot est un atelier de développement. Un ordinateur pour 2 au minimum
est donc nécessaire, équipé du Wifi. Ce sont les seules choses
réellement nécessaires.

[[setup-du-poste-de-travail]]
Setup du poste de travail
~~~~~~~~~~~~~~~~~~~~~~~~~

Bienvenue dans l'arène, gladiateur. Voici les armes dont vous vous servirez pour terrasser vos adversaires :

- JDK 1.8 minimum
- Maven 3.3.x minimum
- Git

En fonction de votre expérience dans ce type de combat, ces armes seront installées sur votre machine de guerre ou non.

Mais vous vous trouverez probablement dans une des situations suivantes :

=== Vous avez un environnement complet et à jour correspondant exactement aux critères demandé
Bravo, vous pouvez vous échauffer car vous allez devoir attendre la préparation des autres guerriers

=== Vous avez un environnement partiellement installé et/ou non à jour
Nous supposons donc que votre expérience vous permettra de vous servir des outils à votre disposition, sur le FTP ou sur votre clé

=== Vous n'avez pas d'environnement de développement Java et :

==== Vous êtes sous windows ou mac
Il est donc préférable d'utiliser VirtualBox.

Nous vous fournissons un installeur windows (VirtualBox-5.0.16-105871-Win.exe) ou mac (VirtualBox-5.0.16-105871-OSX.dmg) et une image
contenant l'environnement de développement Java complet, Git et la base de code sur laquelle vous coderez les features de vos tortionnaires
 (j'ai nommé Marie-Laure et Antoine).

- Copiez l'installeur correspondant à votre environnement sur votre poste
- Copiez l'image VirtualBox sur votre poste (java_development_station.ova)
- Installez VirtualBox
- Démarrez VirtualBox
- Importez l'image VirtualBox :

image::doc/images/vbox-import-1.png[]
image::doc/images/vbox-import-2.png[]
image::doc/images/vbox-import-3.png[]
image::doc/images/vbox-import-4.png[]

- Sélectionnez votre image, cliquez sur "configuration", et configurez au minimum 2048m de mémoire vive, mais si possible, préférez atteindre les 8192m.

image::doc/images/vbox-start-1.png[]
image::doc/images/vbox-start-2.png[]

- Puis lancez l'image

image::doc/images/vbox-start-3.png[]

- Ignorez l'erreur d'insuffisance de place sur le disque dur

image::doc/images/vbox-run-1.png[]

- Pour lancer le projet, ouvrez un terminal puis lancez eclipse :

image::doc/images/vbox-run-2.png[]
image::doc/images/vbox-run-3.png[]
image::doc/images/vbox-run-4.png[]
image::doc/images/vbox-run-5.png[]


==== Vous êtes sous linux
Vous êtes un combattant de type bricoleur. Et surtout, en l'absence d'internet, il va vous être compliqué d'installer VirtualBox avec votre
gestionnaire de paquet favori. Vous installerez donc java manuellement. Il vous faudra par contre Git, installé sur votre machine, sans quoi
il sera inutile d'aller plus loin avec vos propres armes, mais en revanche conseillé de trouver un binôme pour cette bataille sans merci.

détailler l'install java, maven et eclipse

[[enregistrement-en-tant-que-participant]]
Enregistrement en tant que participant
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Avant de participer, il faut vous enregistrer en utilisant la commande curl suivante et en indiquant le vrai nom de votre équipe :

`curl 'http://192.168.0.193:8082/registerRest' -H 'Content-Type: application/json' -H 'Accept: application/json' --data-binary $'{\n  "name": "MY_TEAM_NAME"\n}' --compressed`

Il est aussi possible de s'inscrire directement depuis votre navigateur : `http://192.168.0.193:8082`


[[déroulement-de-latelier]]
Déroulement de l'atelier
------------------------

[[principe]]
Principe
~~~~~~~~

Les products owner vont au fil du déroulement de l'atelier vous demander
d'implémenter de nouvelles fonctionalités afin d'agrémenter le jeu du
tennis.

[[implémentation-dune-nouvelle-feature]]
Implémentation d'une nouvelle feature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Au départ, vous disposez d'un programme qui fonctionne, il permet de
jouer au tennis, et répond à la spécification suivante :

[options="header",]
|======================================================
|Player1 Score |Player2 Score |displayScore() |comments
|0 |0 |love-all |
|0 |1 |love-fifteen |
|0 |2 |love-thirty |
|0 |3 |love-forty |
|0 |4 |win for player2 |or player1 if inverted
|1 |1 |fifteen-all |
|1 |2 |fifteen-thirty |
|1 |3 |fifteen-forty |
|1 |4 |win for player2 |or player1 if inverted
|2 |2 |thirty-all |
|2 |3 |thirty-forty |
|2 |4 |win for player2 |or player1 if inverted
|3 |3 |deuce |
|3 |4 |advantage player2 |or player1 if inverted
|3 |5 |win for player2 |or player1 if inverted
|4 |4 |deuce |
|4 |5 |advantage player2 |or player1 if inverted
|2 |4 |win for player2 |or player1 if inverted
|======================================================

Des tests automatiques existent dans la classe *TennisTest* et
permettent de vérifier ces règles.

[[vérification-de-limplémentation-de-la-feature-et-scoring]]
Vérification de l'implémentation de la feature et scoring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Lorsque vous serez certains que l'implémentation que vous avez effectuée
est correcte, vous aurez deux choses à faire :

1.  Démarrer votre serveur en utilisant le main présent dans la classe
ChallengesApi
* Soit directement depuis votre IDE
* Soit en utilisant la ligne de commande : allez à la racine du projet
_xtreme-refactoring_
** `mvn package`
** `java -jar target/xtreme-refactoring-1.0.0.jar`
2.  Utiliser une requête http pour vérifier votre implémentation.

*Attention :*

* **Votre nombre d'essais est limité à 2**. Passez ce nombre, vous ne
pourrez plus récupérer de points, mais vous pourrez toujours savoir si
votre implémentation est correcte. De la même façon, la réponse à la
requête vous permettras de connaître vos erreurs s'il y en a.
* Nous vous conseillons de couper votre serveur une fois votre
implémentation est terminée, afin d'être sur d'avoir les derniers
changements lors de la prochaine feature. De la même façon, pensez à
vérifier qu'il est démarré avant de faire vérifier votre code.

`curl 'http://192.168.0.193:8082/compare' -H 'Content-Type: application/json' -H 'Accept: application/json'`

ou

directement dans votre navigateur : `http://192.168.0.193:8082/compare`

Réponse :

`{"success":true,"scoreInfo":{"details":{"scoresByTurn":[{"score":0}]},"total":0,"ranking":1},"trialNumberLeft":1,"errors":[]}

[[nouvelles-features]]
Nouvelles features
~~~~~~~~~~~~~~~~~~

Au fil des nouvelles features qui vous serons demandées, les products
owners vont pusher des modifications à la base de code. Pour les
récupérer, il vous suffira de faire :

`git pull --rebase`
